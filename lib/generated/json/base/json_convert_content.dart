// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:battery/common/models/api/msg_data_entity.dart';
import 'package:battery/common/models/api/req_agreement_entity.dart';
import 'package:battery/common/models/api/req_device_list_entity.dart';
import 'package:battery/common/models/api/req_upLocation_entity.dart';
import 'package:battery/common/models/api/res_device_info_entity.dart';
import 'package:battery/common/models/api/res_device_list_entity.dart';
import 'package:battery/common/models/api/res_firmwareUpdate_entity.dart';
import 'package:battery/common/models/api/res_locationAreaList_entity.dart';
import 'package:battery/common/models/api/res_trajectoryInfo_entity.dart';
import 'package:battery/common/models/api/res_trajectoryLists_entity.dart';
import 'package:battery/common/models/api/res_upload_entity.dart';
import 'package:battery/common/models/api/res_user_detail_entity.dart';
import 'package:battery/common/models/api/res_user_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<MsgDataEntity>[] is M) {
      return data.map<MsgDataEntity>((Map<String, dynamic> e) =>
          MsgDataEntity.fromJson(e)).toList() as M;
    }
    if (<ReqAgreementEntity>[] is M) {
      return data.map<ReqAgreementEntity>((Map<String, dynamic> e) =>
          ReqAgreementEntity.fromJson(e)).toList() as M;
    }
    if (<ReqDeviceListEntity>[] is M) {
      return data.map<ReqDeviceListEntity>((Map<String, dynamic> e) =>
          ReqDeviceListEntity.fromJson(e)).toList() as M;
    }
    if (<ReqDeviceListDeviceList>[] is M) {
      return data.map<ReqDeviceListDeviceList>((Map<String, dynamic> e) =>
          ReqDeviceListDeviceList.fromJson(e)).toList() as M;
    }
    if (<ReqUpLocationEntity>[] is M) {
      return data.map<ReqUpLocationEntity>((Map<String, dynamic> e) =>
          ReqUpLocationEntity.fromJson(e)).toList() as M;
    }
    if (<ResDeviceInfoEntity>[] is M) {
      return data.map<ResDeviceInfoEntity>((Map<String, dynamic> e) =>
          ResDeviceInfoEntity.fromJson(e)).toList() as M;
    }
    if (<ResDeviceInfoDeviceInfo>[] is M) {
      return data.map<ResDeviceInfoDeviceInfo>((Map<String, dynamic> e) =>
          ResDeviceInfoDeviceInfo.fromJson(e)).toList() as M;
    }
    if (<ResDeviceListEntity>[] is M) {
      return data.map<ResDeviceListEntity>((Map<String, dynamic> e) =>
          ResDeviceListEntity.fromJson(e)).toList() as M;
    }
    if (<ResDeviceListDeviceList>[] is M) {
      return data.map<ResDeviceListDeviceList>((Map<String, dynamic> e) =>
          ResDeviceListDeviceList.fromJson(e)).toList() as M;
    }
    if (<ResFirmwareUpdateEntity>[] is M) {
      return data.map<ResFirmwareUpdateEntity>((Map<String, dynamic> e) =>
          ResFirmwareUpdateEntity.fromJson(e)).toList() as M;
    }
    if (<ResFirmwareUpdateInfo>[] is M) {
      return data.map<ResFirmwareUpdateInfo>((Map<String, dynamic> e) =>
          ResFirmwareUpdateInfo.fromJson(e)).toList() as M;
    }
    if (<ResLocationAreaListEntity>[] is M) {
      return data.map<ResLocationAreaListEntity>((Map<String, dynamic> e) =>
          ResLocationAreaListEntity.fromJson(e)).toList() as M;
    }
    if (<ResLocationAreaListList>[] is M) {
      return data.map<ResLocationAreaListList>((Map<String, dynamic> e) =>
          ResLocationAreaListList.fromJson(e)).toList() as M;
    }
    if (<ResTrajectoryInfoEntity>[] is M) {
      return data.map<ResTrajectoryInfoEntity>((Map<String, dynamic> e) =>
          ResTrajectoryInfoEntity.fromJson(e)).toList() as M;
    }
    if (<ResTrajectoryInfoList>[] is M) {
      return data.map<ResTrajectoryInfoList>((Map<String, dynamic> e) =>
          ResTrajectoryInfoList.fromJson(e)).toList() as M;
    }
    if (<ResTrajectoryInfoInfo>[] is M) {
      return data.map<ResTrajectoryInfoInfo>((Map<String, dynamic> e) =>
          ResTrajectoryInfoInfo.fromJson(e)).toList() as M;
    }
    if (<ResTrajectoryInfoInfoStartLocation>[] is M) {
      return data.map<ResTrajectoryInfoInfoStartLocation>((
          Map<String, dynamic> e) =>
          ResTrajectoryInfoInfoStartLocation.fromJson(e)).toList() as M;
    }
    if (<ResTrajectoryInfoInfoEndLocation>[] is M) {
      return data.map<ResTrajectoryInfoInfoEndLocation>((
          Map<String, dynamic> e) =>
          ResTrajectoryInfoInfoEndLocation.fromJson(e)).toList() as M;
    }
    if (<ResTrajectoryListsEntity>[] is M) {
      return data.map<ResTrajectoryListsEntity>((Map<String, dynamic> e) =>
          ResTrajectoryListsEntity.fromJson(e)).toList() as M;
    }
    if (<ResTrajectoryListsPageinfo>[] is M) {
      return data.map<ResTrajectoryListsPageinfo>((Map<String, dynamic> e) =>
          ResTrajectoryListsPageinfo.fromJson(e)).toList() as M;
    }
    if (<ResTrajectoryListsList>[] is M) {
      return data.map<ResTrajectoryListsList>((Map<String, dynamic> e) =>
          ResTrajectoryListsList.fromJson(e)).toList() as M;
    }
    if (<ResTrajectoryListsListStartLocation>[] is M) {
      return data.map<ResTrajectoryListsListStartLocation>((
          Map<String, dynamic> e) =>
          ResTrajectoryListsListStartLocation.fromJson(e)).toList() as M;
    }
    if (<ResTrajectoryListsListEndLocation>[] is M) {
      return data.map<ResTrajectoryListsListEndLocation>((
          Map<String, dynamic> e) =>
          ResTrajectoryListsListEndLocation.fromJson(e)).toList() as M;
    }
    if (<ResTrajectoryListsInfo>[] is M) {
      return data.map<ResTrajectoryListsInfo>((Map<String, dynamic> e) =>
          ResTrajectoryListsInfo.fromJson(e)).toList() as M;
    }
    if (<ResUploadEntity>[] is M) {
      return data.map<ResUploadEntity>((Map<String, dynamic> e) =>
          ResUploadEntity.fromJson(e)).toList() as M;
    }
    if (<ResUserDetailEntity>[] is M) {
      return data.map<ResUserDetailEntity>((Map<String, dynamic> e) =>
          ResUserDetailEntity.fromJson(e)).toList() as M;
    }
    if (<ResUserDetailsUserinfo>[] is M) {
      return data.map<ResUserDetailsUserinfo>((Map<String, dynamic> e) =>
          ResUserDetailsUserinfo.fromJson(e)).toList() as M;
    }
    if (<ResUserDetailsUserinfoVerification>[] is M) {
      return data.map<ResUserDetailsUserinfoVerification>((
          Map<String, dynamic> e) =>
          ResUserDetailsUserinfoVerification.fromJson(e)).toList() as M;
    }
    if (<ResUserEntity>[] is M) {
      return data.map<ResUserEntity>((Map<String, dynamic> e) =>
          ResUserEntity.fromJson(e)).toList() as M;
    }
    if (<ResUserUserinfo>[] is M) {
      return data.map<ResUserUserinfo>((Map<String, dynamic> e) =>
          ResUserUserinfo.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (MsgDataEntity).toString(): MsgDataEntity.fromJson,
    (ReqAgreementEntity).toString(): ReqAgreementEntity.fromJson,
    (ReqDeviceListEntity).toString(): ReqDeviceListEntity.fromJson,
    (ReqDeviceListDeviceList).toString(): ReqDeviceListDeviceList.fromJson,
    (ReqUpLocationEntity).toString(): ReqUpLocationEntity.fromJson,
    (ResDeviceInfoEntity).toString(): ResDeviceInfoEntity.fromJson,
    (ResDeviceInfoDeviceInfo).toString(): ResDeviceInfoDeviceInfo.fromJson,
    (ResDeviceListEntity).toString(): ResDeviceListEntity.fromJson,
    (ResDeviceListDeviceList).toString(): ResDeviceListDeviceList.fromJson,
    (ResFirmwareUpdateEntity).toString(): ResFirmwareUpdateEntity.fromJson,
    (ResFirmwareUpdateInfo).toString(): ResFirmwareUpdateInfo.fromJson,
    (ResLocationAreaListEntity).toString(): ResLocationAreaListEntity.fromJson,
    (ResLocationAreaListList).toString(): ResLocationAreaListList.fromJson,
    (ResTrajectoryInfoEntity).toString(): ResTrajectoryInfoEntity.fromJson,
    (ResTrajectoryInfoList).toString(): ResTrajectoryInfoList.fromJson,
    (ResTrajectoryInfoInfo).toString(): ResTrajectoryInfoInfo.fromJson,
    (ResTrajectoryInfoInfoStartLocation)
        .toString(): ResTrajectoryInfoInfoStartLocation.fromJson,
    (ResTrajectoryInfoInfoEndLocation)
        .toString(): ResTrajectoryInfoInfoEndLocation.fromJson,
    (ResTrajectoryListsEntity).toString(): ResTrajectoryListsEntity.fromJson,
    (ResTrajectoryListsPageinfo).toString(): ResTrajectoryListsPageinfo
        .fromJson,
    (ResTrajectoryListsList).toString(): ResTrajectoryListsList.fromJson,
    (ResTrajectoryListsListStartLocation)
        .toString(): ResTrajectoryListsListStartLocation.fromJson,
    (ResTrajectoryListsListEndLocation)
        .toString(): ResTrajectoryListsListEndLocation.fromJson,
    (ResTrajectoryListsInfo).toString(): ResTrajectoryListsInfo.fromJson,
    (ResUploadEntity).toString(): ResUploadEntity.fromJson,
    (ResUserDetailEntity).toString(): ResUserDetailEntity.fromJson,
    (ResUserDetailsUserinfo).toString(): ResUserDetailsUserinfo.fromJson,
    (ResUserDetailsUserinfoVerification)
        .toString(): ResUserDetailsUserinfoVerification.fromJson,
    (ResUserEntity).toString(): ResUserEntity.fromJson,
    (ResUserUserinfo).toString(): ResUserUserinfo.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}